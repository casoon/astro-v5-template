---
export interface Props {
  title?: string;
  description?: string;
  variant?: 'inline' | 'card';
}

const {
  title = "Stay Updated",
  description = "Get the latest news and updates delivered to your inbox.",
  variant = 'card'
} = Astro.props;
---

<div class={variant === 'card' ? 'cs-glass-lg p-8 rounded-2xl' : ''}>
  <div class={variant === 'inline' ? 'flex items-center gap-4' : 'text-center'}>
    <div class={variant === 'inline' ? 'flex-1' : 'mb-6'}>
      <h3 class="text-2xl font-bold text-slate-900 dark:text-white mb-2">
        {title}
      </h3>
      <p class="text-slate-600 dark:text-slate-300">
        {description}
      </p>
    </div>
    
    <form 
      id="newsletter-form"
      class={variant === 'inline' ? 'flex-1' : 'mt-6'}
      action="/api/newsletter"
      method="POST"
    >
      <div class="flex gap-2">
        <input
          type="email"
          name="email"
          id="newsletter-email"
          required
          placeholder="Enter your email"
          class="flex-1 px-4 py-3 bg-white/50 dark:bg-slate-800/50 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 backdrop-blur-sm"
        />
        <button
          type="submit"
          class="px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-blue-700 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none whitespace-nowrap"
        >
          <span class="flex items-center">
            <span id="newsletter-button-text">Subscribe</span>
            <svg id="newsletter-spinner" class="hidden animate-spin ml-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </span>
        </button>
      </div>
      <p class="mt-2 text-sm text-red-500 hidden" id="newsletter-error">
        Please enter a valid email address
      </p>
    </form>
  </div>
  
  <!-- Success Message -->
  <div id="newsletter-success" class="hidden mt-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
    <p class="text-green-700 dark:text-green-300 flex items-center">
      <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
      </svg>
      Thanks for subscribing! Check your email for confirmation.
    </p>
  </div>
</div>

<script>
  const form = document.getElementById('newsletter-form') as HTMLFormElement;
  const emailInput = document.getElementById('newsletter-email') as HTMLInputElement;
  const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  const buttonText = document.getElementById('newsletter-button-text');
  const buttonSpinner = document.getElementById('newsletter-spinner');
  const errorMessage = document.getElementById('newsletter-error');
  const successMessage = document.getElementById('newsletter-success');

  // Email validation
  const validateEmail = (email: string) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const email = emailInput.value.trim();
    
    // Validate email
    if (!validateEmail(email)) {
      errorMessage?.classList.remove('hidden');
      emailInput.classList.add('border-red-500');
      return;
    }

    // Clear error state
    errorMessage?.classList.add('hidden');
    emailInput.classList.remove('border-red-500');

    // Show loading state
    submitButton.disabled = true;
    buttonText!.textContent = 'Subscribing...';
    buttonSpinner!.classList.remove('hidden');

    try {
      const response = await fetch('/api/newsletter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (response.ok) {
        // Show success message
        form.style.display = 'none';
        successMessage!.classList.remove('hidden');
        
        // Show toast notification
        window.dispatchEvent(new CustomEvent('show-toast', {
          detail: {
            message: 'Successfully subscribed to newsletter!',
            type: 'success'
          }
        }));
      } else {
        throw new Error('Subscription failed');
      }
    } catch (error) {
      // Show error
      window.dispatchEvent(new CustomEvent('show-toast', {
        detail: {
          message: 'Failed to subscribe. Please try again.',
          type: 'error'
        }
      }));
    } finally {
      // Reset button state
      submitButton.disabled = false;
      buttonText!.textContent = 'Subscribe';
      buttonSpinner!.classList.add('hidden');
    }
  });

  // Clear error on input
  emailInput.addEventListener('input', () => {
    if (errorMessage && !errorMessage.classList.contains('hidden')) {
      errorMessage.classList.add('hidden');
      emailInput.classList.remove('border-red-500');
    }
  });
</script>