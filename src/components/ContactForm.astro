---
export interface Props {
  action?: string;
  method?: 'POST' | 'GET';
}

const { action = '/api/contact', method = 'POST' } = Astro.props;
---

<form 
  id="contact-form"
  action={action} 
  method={method}
  class="w-full max-w-2xl mx-auto"
>
  <div class="cs-glass-lg p-8 rounded-2xl space-y-6">
    <h3 class="text-2xl font-bold text-slate-900 dark:text-white mb-6">Get in Touch</h3>
    
    <!-- Name Field -->
    <div>
      <label for="name" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
        Name <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="name"
        name="name"
        required
        class="w-full px-4 py-2 bg-white/50 dark:bg-slate-800/50 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 backdrop-blur-sm"
        placeholder="John Doe"
      />
      <p class="mt-1 text-sm text-red-500 hidden" id="name-error">Please enter your name</p>
    </div>

    <!-- Email Field -->
    <div>
      <label for="email" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
        Email <span class="text-red-500">*</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-2 bg-white/50 dark:bg-slate-800/50 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 backdrop-blur-sm"
        placeholder="john@example.com"
      />
      <p class="mt-1 text-sm text-red-500 hidden" id="email-error">Please enter a valid email</p>
    </div>

    <!-- Subject Field -->
    <div>
      <label for="subject" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
        Subject <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="subject"
        name="subject"
        required
        class="w-full px-4 py-2 bg-white/50 dark:bg-slate-800/50 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 backdrop-blur-sm"
        placeholder="How can we help?"
      />
      <p class="mt-1 text-sm text-red-500 hidden" id="subject-error">Please enter a subject</p>
    </div>

    <!-- Message Field -->
    <div>
      <label for="message" class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
        Message <span class="text-red-500">*</span>
      </label>
      <textarea
        id="message"
        name="message"
        rows="5"
        required
        class="w-full px-4 py-2 bg-white/50 dark:bg-slate-800/50 border border-slate-300 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 backdrop-blur-sm resize-none"
        placeholder="Your message here..."
      ></textarea>
      <p class="mt-1 text-sm text-red-500 hidden" id="message-error">Please enter a message</p>
    </div>

    <!-- Submit Button -->
    <div class="flex items-center justify-between">
      <p class="text-sm text-slate-500 dark:text-slate-400">
        <span class="text-red-500">*</span> Required fields
      </p>
      <button
        type="submit"
        class="px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-blue-700 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
      >
        <span class="flex items-center">
          <span id="button-text">Send Message</span>
          <svg id="button-spinner" class="hidden animate-spin ml-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>
  </div>
</form>

<script>
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  const buttonText = document.getElementById('button-text');
  const buttonSpinner = document.getElementById('button-spinner');

  // Validation functions
  const validateEmail = (email: string) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const showError = (fieldId: string, show: boolean) => {
    const errorElement = document.getElementById(`${fieldId}-error`);
    if (errorElement) {
      errorElement.classList.toggle('hidden', !show);
    }
  };

  const validateField = (field: HTMLInputElement | HTMLTextAreaElement) => {
    const isValid = field.value.trim() !== '' && 
      (field.type !== 'email' || validateEmail(field.value));
    
    showError(field.id, !isValid);
    field.classList.toggle('border-red-500', !isValid);
    
    return isValid;
  };

  // Add validation on blur
  const fields = form.querySelectorAll('input, textarea');
  fields.forEach(field => {
    field.addEventListener('blur', () => {
      validateField(field as HTMLInputElement | HTMLTextAreaElement);
    });
  });

  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validate all fields
    let isValid = true;
    fields.forEach(field => {
      if (!validateField(field as HTMLInputElement | HTMLTextAreaElement)) {
        isValid = false;
      }
    });

    if (!isValid) return;

    // Show loading state
    submitButton.disabled = true;
    buttonText!.textContent = 'Sending...';
    buttonSpinner!.classList.remove('hidden');

    // Prepare form data
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);

    try {
      const response = await fetch(form.action, {
        method: form.method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        // Success - show toast notification
        form.reset();
        window.dispatchEvent(new CustomEvent('show-toast', {
          detail: {
            message: 'Message sent successfully!',
            type: 'success'
          }
        }));
      } else {
        throw new Error('Failed to send message');
      }
    } catch (error) {
      // Error - show toast notification
      window.dispatchEvent(new CustomEvent('show-toast', {
        detail: {
          message: 'Failed to send message. Please try again.',
          type: 'error'
        }
      }));
    } finally {
      // Reset button state
      submitButton.disabled = false;
      buttonText!.textContent = 'Send Message';
      buttonSpinner!.classList.add('hidden');
    }
  });
</script>