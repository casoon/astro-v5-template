---
// This component should be included in BaseLayout
---

<div id="toast-container" class="fixed top-4 right-4 z-50 pointer-events-none">
  <!-- Toasts will be dynamically inserted here -->
</div>

<script>
  interface ToastOptions {
    message: string;
    type?: 'success' | 'error' | 'info' | 'warning';
    duration?: number;
  }

  class ToastManager {
    private container: HTMLElement;
    private toasts: Map<string, HTMLElement> = new Map();

    constructor() {
      this.container = document.getElementById('toast-container')!;
      this.setupEventListener();
    }

    private setupEventListener() {
      window.addEventListener('show-toast', (event: Event) => {
        const customEvent = event as CustomEvent<ToastOptions>;
        this.show(customEvent.detail);
      });
    }

    show(options: ToastOptions) {
      const {
        message,
        type = 'info',
        duration = 5000
      } = options;

      const id = `toast-${Date.now()}`;
      const toast = this.createToast(id, message, type);
      
      this.toasts.set(id, toast);
      this.container.appendChild(toast);

      // Trigger entrance animation
      requestAnimationFrame(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
        toast.classList.add('translate-x-0', 'opacity-100');
      });

      // Auto remove after duration
      if (duration > 0) {
        setTimeout(() => this.remove(id), duration);
      }

      return id;
    }

    private createToast(id: string, message: string, type: string): HTMLElement {
      const toast = document.createElement('div');
      toast.id = id;
      toast.className = `
        cs-glass-lg 
        p-4 
        mb-4 
        rounded-lg 
        shadow-xl 
        pointer-events-auto 
        transform 
        translate-x-full 
        opacity-0 
        transition-all 
        duration-300 
        max-w-sm 
        w-full
        flex
        items-center
        gap-3
      `;

      const icon = this.getIcon(type);
      const colors = this.getColors(type);

      toast.innerHTML = `
        <div class="flex-shrink-0">
          <div class="w-10 h-10 rounded-full ${colors.bg} flex items-center justify-center">
            ${icon}
          </div>
        </div>
        <div class="flex-1">
          <p class="text-sm font-medium text-slate-900 dark:text-white">${message}</p>
        </div>
        <button 
          onclick="window.toastManager.remove('${id}')"
          class="flex-shrink-0 ml-4 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 transition-colors"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      `;

      return toast;
    }

    private getIcon(type: string): string {
      const icons = {
        success: '<svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" /></svg>',
        error: '<svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>',
        warning: '<svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>',
        info: '<svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" /></svg>'
      };
      return icons[type as keyof typeof icons] || icons.info;
    }

    private getColors(type: string): { bg: string } {
      const colors = {
        success: { bg: 'bg-green-500' },
        error: { bg: 'bg-red-500' },
        warning: { bg: 'bg-yellow-500' },
        info: { bg: 'bg-blue-500' }
      };
      return colors[type as keyof typeof colors] || colors.info;
    }

    remove(id: string) {
      const toast = this.toasts.get(id);
      if (!toast) return;

      // Trigger exit animation
      toast.classList.remove('translate-x-0', 'opacity-100');
      toast.classList.add('translate-x-full', 'opacity-0');

      // Remove after animation
      setTimeout(() => {
        toast.remove();
        this.toasts.delete(id);
      }, 300);
    }
  }

  // Initialize and make globally available
  declare global {
    interface Window {
      toastManager: ToastManager;
    }
  }

  window.toastManager = new ToastManager();

  // Helper function for easy access
  window.showToast = (message: string, type?: string, duration?: number) => {
    window.toastManager.show({ message, type, duration });
  };
</script>

<style>
  /* Additional toast-specific styles if needed */
  #toast-container > * + * {
    margin-top: 1rem;
  }
</style>